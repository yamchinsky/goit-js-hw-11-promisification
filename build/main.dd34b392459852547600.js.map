{"version":3,"sources":["webpack:///./js/task01.js","webpack:///./js/task02.js","webpack:///./js/task03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAKMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAGjBC,YAAW,WAETD,EAAQF,KACPA,OAMDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCClBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAuBnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GAInBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO9DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAG7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCJpC,IAIMe,EAAkB,SAACC,GAErB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAEzB,IAR2BC,EAAKC,EAQ1BxB,GARqBuB,EAQa,IARRC,EAQa,IAP5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQxCK,EAAaH,KAAKE,SAAW,GAEnCvB,YAAW,WACHwB,EACAzB,EAAQ,CAAE0B,GAAIR,EAAYQ,GAAIvB,KAAMN,IAEpCsB,EAAOD,EAAYQ,MAExB7B,OAIL8B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIvB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAIFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.dd34b392459852547600.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис,\n// переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во\n// миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    \n    \n    setTimeout(() => {\n      \n      resolve(ms);\n    }, ms);\n  });\n};\n\n\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так,\n// чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и\n// возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n\n\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n        );\n    resolve(updatedUsers);\n    });\n}\n\n\n const logger = updatedUsers => console.table(updatedUsers);\n\n \n toggleUserState(users, 'Mango').then(logger);\n toggleUserState(users, 'Lux').then(logger);","// Перепиши функцию makeTransaction() так,\n// чтобы она не использовала callback - функции onSuccess\n// и onError, а принимала всего один параметр transaction и\n// возвращала промис.\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n \n    return new Promise((resolve, reject) => {\n    \n        const delay = randomIntegerFromInterval(200, 500);\n        const canProcess = Math.random() > 0.3;\n\n        setTimeout(() => {\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}